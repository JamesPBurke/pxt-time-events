<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="Ert2o;0)7I2]jBsLx`BP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="vtv{2p427}w@6op6C+I7"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TimeEvents {" line1="    //% block=&quot;set up clock with|total seconds $total_seconds|chunk size $chunk_size&quot;" line2="    //% total_seconds.min=1 total_seconds.max=600 total_seconds.defl=60" line3="    //% chunk_size.min=1 chunk_size.max=60 chunk_size.defl=6" line4="    export function setUpClock(total_seconds: number, chunk_size: number) {" line5="        started = false" line6="        seconds = 0" line7="        millis_limit = total_seconds * 1000" line8="        time_chunk_size = chunk_size * 1000" line9="        next_millis_target = time_chunk_size" line10="        time_units_left = 10" line11="    }" line12="    //% block" line13="    export function startClock() {" line14="        started = true" line15="        start_millis = control.millis()" line16="    }" line17="" line18="    //% block=&quot;on chunk elapsed&quot;" line19="    export function onChunkElapsed(handler: () =&gt; void) {" line20="        control.onEvent(700, 1, handler)" line21="    }" line22="" line23="    //% block=&quot;on time elapsed&quot;" line24="    export function onTimeElapsed(handler: () =&gt; void) {" line25="        control.onEvent(700, 2, handler)" line26="    }" line27="" line28="" line29="    let clock_done = false" line30="    let clock_run_time = 0" line31="    let time_units_left = 0" line32="    let next_millis_target = 0" line33="    let time_chunk_size = 0" line34="    let millis_limit = 0" line35="    let seconds = 0" line36="    let start_millis = 0" line37="    let started = false" line38="    basic.forever(function () {" line39="        if (started) {" line40="            clock_run_time = control.millis() - start_millis" line41="            if (clock_run_time &gt;= next_millis_target) {" line42="                next_millis_target += time_chunk_size" line43="                control.raiseEvent(" line44="                    700," line45="                    1" line46="                )" line47="            } else if (clock_run_time &gt;= millis_limit) {" line48="                started = false" line49="                clock_done = true" line50="                control.raiseEvent(" line51="                    700," line52="                    2" line53="                )" line54="            }" line55="        }" line56="    })" line57="" line58="}" numlines="59"></mutation></block></statement></block></xml>